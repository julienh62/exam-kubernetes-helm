# Default values for myhelm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Configuration pour l'application 
fastApi:
  deploymentName: fastapi
  serviceName: fastapi-service
  replicas: 3
  containerName: fastapi
  image: julh62/exam-kubernetes_fastapi:latest
  containerPort: 5000
  environment:
    - name: DATABASE_URL
      value: "postgresql://admin:password@db:5432/storedb"
  #configuration ingress
  ingressName: ingress-fastapi
  ingressClassName: nginx
  ingressDomain: jhennebo.be
  ingressSecretName: fastapi-tls
  ingressServiceName: fastapi-service
  ingressServicePort: 5000
  ingressCertManagerIssuer: letsencrypt-prod
  #config hpa
  hpaName: fastapi-hpa
  hpaMinReplicas: 3
  hpaMaxReplicas: 6
  hpaTargetCPUUtilizationPercentage: 70

# Configuration pour application pgadmin
pgAdmin:
  deploymentName: pgadmin
  serviceName: pgadmin-service
  replicas: 3
  containerName: pgadmin
  image: dpage/pgadmin4:latest
  containerPort: 8081
  environment:
    - name: PGADMIN_DEFAULT_EMAIL
      value: "jhennebo@gmail.com"
    - name: PGADMIN_DEFAULT_PASSWORD
      value: "admin" 

#config postgres
postgres:
  serviceName: postgres
  appLabel: postgres
  deploymentName: postgres
  replicas: 1
  containerName: postgres
  image: postgres:12.0-alpine
  environment:
    POSTGRES_USER: "admin"
    POSTGRES_PASSWORD: "password"
    POSTGRES_DB: "storedb"
    POSTGRES_HOST_AUTH_METHOD: "trust"
  ports:
    containerPort: 5432
  volume:
    mountPath: /var/lib/postgresql/data
    name: postgres-storage
    persistentVolumeClaim:
      claimName: postgres-pvc
  resources:  # Ajout des ressources (optionnel mais recommand√© pour la gestion des ressources)
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1"
  pvc:  # Configuration de la PVC
    name: postgres-pvc
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi

#configuration services
fastApiService:
    serviceName: fastapi-service
    port: 80
    targetPort: 5000
    type: LoadBalancer
    selector:
      app: fastapi-service

pgAdminService:
  serviceName: pgadmin-service
  port: 80
  targetPort: 8081
  type: NodePort
  selector:
    app: pgadmin

postgresService:
  serviceName: db
  port: 5432
  targetPort: 5432
  type: NodePort
  selector:
    app: postgres

clusterIssuer:
  name: letsencrypt-prod
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: jhennebo@gmail.com
    privateKeySecretName: letsencrypt-prod
    solver:
      ingressClass: nginx

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
